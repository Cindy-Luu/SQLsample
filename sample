-- Creates user with some administrative privileges
CREATE USER Sales_adm IDENTIFIED BY myPassword; 
GRANT CREATE SESSION to Sales_adm; 
GRANT CREATE TABLE to Sales_adm; 
GRANT UNLIMITED TABLESPACE to Sales_adm; 
GRANT SELECT ANY TABLE to Sales_adm; 
GRANT UPDATE ANY TABLE to Sales_adm; 
GRANT INSERT ANY TABLE to Sales_adm; 
GRANT DROP ANY TABLE to Sales_adm; 
GRANT CONNECT, RESOURCE, DBA TO Sales_adm;
Connect Sales_adm;

-- Creates REGIONS Table   
CREATE TABLE REGIONS
   (REGION_ID NUMBER NOT NULL, 
	REGION_NAME VARCHAR2(64 BYTE) NOT NULL, 
	PRIMARY KEY (REGION_ID)
);
	COMMENT ON COLUMN "REGIONS"."REGION_ID" IS 'Primary key of REGIONS table.';
	COMMENT ON COLUMN "REGIONS"."REGION_NAME" IS 'Region or province name. A not null column.'; 
	COMMENT ON TABLE "REGIONS"  IS 'REGIONS table specifies region or province for the customer address';

-- Creates COUNTRIES Table   
CREATE TABLE COUNTRIES 
   (COUNTRY_ID NUMBER NOT NULL, 
	COUNTRY_NAME VARCHAR2(64 BYTE), 
	REGION_ID NUMBER, 
	PRIMARY KEY (COUNTRY_ID), 
	CONSTRAINT COUNTR_REG_FK FOREIGN KEY (REGION_ID)
	  REFERENCES REGIONS (REGION_ID)
   );
   COMMENT ON COLUMN "COUNTRIES"."COUNTRY_ID" IS 'Primary key of countries table.';
   COMMENT ON COLUMN "COUNTRIES"."COUNTRY_NAME" IS 'Country name';
   COMMENT ON COLUMN "COUNTRIES"."REGION_ID" IS 'Region ID for the country. Foreign key to region_id column in the Regions table.';

-- Creates ADDRESS Table   
CREATE TABLE ADDRESS 
   (ADDRESS_ID NUMBER(6,0), 
	STREET_ADDRESS VARCHAR2(128 BYTE), 
	POSTAL_CODE VARCHAR2(32 BYTE), 
	CITY VARCHAR2(64 BYTE) NOT NULL, 
	STATE_PROVINCE VARCHAR2(32 BYTE), 
	COUNTRY_ID NUMBER NOT NULL, 
	 PRIMARY KEY (ADDRESS_ID), 
	 CONSTRAINT COU_ID_FK FOREIGN KEY (COUNTRY_ID)
	  REFERENCES COUNTRIES (COUNTRY_ID) ENABLE
   );
   COMMENT ON COLUMN "ADDRESS"."ADDRESS_ID" IS 'Primary key of address table';
   COMMENT ON COLUMN "ADDRESS"."STREET_ADDRESS" IS 'Street address of the customer.';
   COMMENT ON COLUMN "ADDRESS"."POSTAL_CODE" IS 'Postal code of the address for customer. ';
   COMMENT ON COLUMN "ADDRESS"."CITY" IS 'A not null column. City where which customer lives. ';
   COMMENT ON COLUMN "ADDRESS"."STATE_PROVINCE" IS 'State or Province where the customer lives.';
   COMMENT ON COLUMN "ADDRESS"."COUNTRY_ID" IS 'Country where customer lives. Foreign key to country_id column of the countries table.';
   COMMENT ON TABLE "ADDRESS"  IS 'Address table contains specific address of a customer';
     
-- Creates Customers Table
CREATE TABLE CUSTOMERS 
   (CUSTOMER_ID NUMBER(6,0), 
	LAST_NAME VARCHAR2(32 BYTE) NOT NULL,
	FIRST_NAME VARCHAR2(32 BYTE), 
	EMAIL VARCHAR2(32 BYTE) NOT NULL, 
	PHONE VARCHAR2(64 BYTE), 
	ADDRESS_ID NUMBER(6,0),
	CONSTRAINT CUST_EMAIL_UK UNIQUE (EMAIL),	
	PRIMARY KEY (CUSTOMER_ID),
	CONSTRAINT ADDR_CUST_FK FOREIGN KEY (ADDRESS_ID)
	  REFERENCES ADDRESS (ADDRESS_ID)
   );
   COMMENT ON COLUMN "CUSTOMERS"."CUSTOMER_ID" IS 'Primary key of CUSTOMERS table.';
   COMMENT ON COLUMN "CUSTOMERS"."FIRST_NAME" IS 'First name of the CUSTOMER. A not null column.';
   COMMENT ON COLUMN "CUSTOMERS"."LAST_NAME" IS 'Last name of the CUSTOMER. A not null column.';
   COMMENT ON COLUMN "CUSTOMERS"."EMAIL" IS 'Email of the CUSTOMER';
   COMMENT ON COLUMN "CUSTOMERS"."ADDRESS_ID" IS 'Foreign key to Address';
   COMMENT ON COLUMN "CUSTOMERS"."PHONE" IS 'Phone number of the CUSTOMER; includes country code and area code'; 
   COMMENT ON TABLE "CUSTOMERS"  IS 'CUSTOMERS table.';

-- Creates Sales tax Table
CREATE TABLE TAXRATES (  
    SALES_TAX_ID NUMBER(9,0) NOT NULL, 
	REGION_ID NUMBER(9,0) NOT NULL, 
	TAX_RATE NUMBER(4,2) NOT NULL, 
	TAX_NAME VARCHAR2(32 BYTE) NOT NULL, 
	PRIMARY KEY ( SALES_TAX_ID ), 	
	CONSTRAINT REGION_TAX_fk FOREIGN KEY ( REGION_ID )
        references REGIONS ( REGION_ID ) 	
); 
   COMMENT ON COLUMN "TAXRATES"."SALES_TAX_ID" IS 'Primary key of TAXRATES table.';
   COMMENT ON COLUMN "TAXRATES"."REGION_ID" IS 'FOREIGN key to region. A not null column.';
   COMMENT ON COLUMN "TAXRATES"."TAX_RATE" IS 'Tax rate. A not null column.';
   COMMENT ON COLUMN "TAXRATES"."TAX_NAME" IS 'tax description';  
   COMMENT ON TABLE "TAXRATES"  IS 'Sales tax table.';   
   
-- Creates Products Table
CREATE TABLE PRODUCTS 
   (PRODUCT_ID NUMBER(6,0), 
	PRODUCT_NAME VARCHAR2(32 BYTE) NOT NULL,
	PRODUCT_NUMBER VARCHAR2(32 BYTE) NOT NULL,
	LIST_PRICE NUMBER(6,2) NOT NULL,		
	PRIMARY KEY (PRODUCT_ID),
	CONSTRAINT PROD_NUM_UK UNIQUE (PRODUCT_NUMBER)
   );   
   COMMENT ON COLUMN "PRODUCTS"."PRODUCT_ID" IS 'Primary key of PRODUCTS table.';
   COMMENT ON COLUMN "PRODUCTS"."PRODUCT_NAME" IS 'Name of the PRODUCT. A not null column.';
   COMMENT ON COLUMN "PRODUCTS"."PRODUCT_NUMBER" IS 'Product number. A not null column.';
   COMMENT ON COLUMN "PRODUCTS"."LIST_PRICE" IS 'Price of the PRODUCT. A not null column.';
   COMMENT ON TABLE "PRODUCTS"  IS 'Products table contains products for sale';
   
   -- Creates SalesOrders Table
CREATE TABLE SALESORDERS (  
    SALES_ORDER_ID NUMBER(10,0) NOT NULL, 
	SALES_ORDER_NUMBER NUMBER(9,0) NOT NULL, 	
	CUSTOMER_ID NUMBER(6,0),	
	SALES_ORDER_DATE DATE NOT NULL,
	DUE_DATE DATE NOT NULL,
	SHIP_DATE DATE NOT NULL,
	CREDIT_CARD_APPROAL_CODE varchar2(64) NOT NULL, 	
	SUBTOTAL NUMBER(8,2) NOT NULL,
	TAX_AMOUNT NUMBER(4,2) NOT NULL,
	TOTAL_DUE NUMBER(8,2) NOT NULL,
	PRIMARY KEY ( SALES_ORDER_ID ), 
	CONSTRAINT SALES_ORDER_NUM_uk UNIQUE (SALES_ORDER_NUMBER), 
	CONSTRAINT CUST_ID_fk FOREIGN KEY ( CUSTOMER_ID )
        references Customers ( CUSTOMER_ID ),		
	CONSTRAINT CHK_SalesOrders CHECK (SALES_ORDER_NUMBER>910001)
);   
   COMMENT ON COLUMN "SALESORDERS"."SALES_ORDER_ID" IS 'Primary key of CUSTOMERS table.';
   COMMENT ON COLUMN "SALESORDERS"."SALES_ORDER_NUMBER" IS 'Unique number for sales order. A not null column.';
   COMMENT ON COLUMN "SALESORDERS"."CUSTOMER_ID" IS 'Foreign key to address table. A not null column.';
   COMMENT ON COLUMN "SALESORDERS"."SALES_ORDER_DATE" IS 'The date of sales';
   COMMENT ON COLUMN "SALESORDERS"."DUE_DATE" IS 'Date order is due';
   COMMENT ON COLUMN "SALESORDERS"."SHIP_DATE" IS 'Date order was shipped to customer'; 
   COMMENT ON COLUMN "SALESORDERS"."CREDIT_CARD_APPROAL_CODE" IS 'Code from credit card approval';
   COMMENT ON COLUMN "SALESORDERS"."SUBTOTAL" IS 'Products subtotal'; 
   COMMENT ON COLUMN "SALESORDERS"."TAX_AMOUNT" IS 'Tax amount from all products sold';
   COMMENT ON COLUMN "SALESORDERS"."TOTAL_DUE" IS 'Total from addition of tax to the subtotal';    
   COMMENT ON TABLE "SALESORDERS"  IS 'SALESORDERS table.';
   
-- Creates SalesOrderDetails Table
create table SALESORDERDETAILS (
    SALES_ORDER_ID NUMBER(10,0),
	SALES_ORDER_DETAIL_ID NUMBER(12,0),
	PRODUCT_ID NUMBER(6,0),
	QUANTITY NUMBER(4,0),
	UNIT_PRICE NUMBER(6,2),
	SALES_TAX_ID NUMBER(9,0),
	LINE_TOTAL NUMBER(9,2),
 	PRIMARY KEY ( SALES_ORDER_DETAIL_ID ),
	CONSTRAINT SALES_ORD_FK FOREIGN KEY ( SALES_ORDER_ID )
            references SALESORDERS ( SALES_ORDER_ID ),
	CONSTRAINT SALES_TAX_FK FOREIGN KEY ( SALES_TAX_ID )
            references TAXRATES ( SALES_TAX_ID ),			
	CONSTRAINT PROD_ORD_DET_FK FOREIGN KEY ( PRODUCT_ID )
            references PRODUCTS ( PRODUCT_ID )		
);
   COMMENT ON COLUMN "SALESORDERDETAILS"."SALES_ORDER_ID" IS 'Foreign key to salesOrders table.';
   COMMENT ON COLUMN "SALESORDERDETAILS"."SALES_ORDER_DETAIL_ID" IS 'Primary key of CUSTOMERS table.';
   COMMENT ON COLUMN "SALESORDERDETAILS"."PRODUCT_ID" IS 'FOREIGN key to products. A not null column.';
   COMMENT ON COLUMN "SALESORDERDETAILS"."QUANTITY" IS 'Number of quantity of products';
   COMMENT ON COLUMN "SALESORDERDETAILS"."UNIT_PRICE" IS 'Price per item';
   COMMENT ON COLUMN "SALESORDERDETAILS"."SALES_TAX_ID" IS 'Tax id foreign key to tax rates table'; 
   COMMENT ON COLUMN "SALESORDERDETAILS"."LINE_TOTAL" IS 'TOTAL OF ITEMS';
   COMMENT ON TABLE "SALESORDERDETAILS"  IS 'SALESORDERDETAILS table.';

-- Insert into regionas table
INSERT INTO REGIONS (REGION_ID, REGION_NAME)
VALUES(21048, 'Carroll County, Maryland');

INSERT INTO REGIONS (REGION_ID, REGION_NAME)
VALUES(7005001, 'London NW8 9AY, United Kingdom');

INSERT INTO REGIONS (REGION_ID, REGION_NAME)
VALUES(9910100, 'Bangkok, Thailand');

INSERT INTO REGIONS (REGION_ID, REGION_NAME)
VALUES(94117, 'San Francisco County, San Francisco');

INSERT INTO REGIONS (REGION_ID, REGION_NAME)
VALUES(20169, 'Haymarket, Virginia');

INSERT INTO REGIONS (REGION_ID, REGION_NAME)
VALUES(59102, 'Billings, Montana');

--Insert into COUNTRIES table
INSERT INTO COUNTRIES (COUNTRY_ID, COUNTRY_NAME, REGION_ID)
VALUES(1, 'Unitied States', 21048);

INSERT INTO COUNTRIES (COUNTRY_ID, COUNTRY_NAME, REGION_ID)
VALUES(2, 'England', 7005001);

INSERT INTO COUNTRIES (COUNTRY_ID, COUNTRY_NAME, REGION_ID)
VALUES(3, 'Thailand', 9910100);

--Insert into ADDRESS table
INSERT INTO ADDRESS (ADDRESS_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID)
VALUES(1, '4300 Old Henry Road', '21048', 'Baltimore', 'Maryland', 1);	

INSERT INTO ADDRESS (ADDRESS_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID)
VALUES(2, '3 Abbey Road', 'NW8 9AY', 'London', 'United Kingdom', 2);

INSERT INTO ADDRESS (ADDRESS_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID)
VALUES(3, '1087, 167 Phetchaburi Road', '10400', 'Bangkok', 'Thailand', 3);

INSERT INTO ADDRESS (ADDRESS_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID)
VALUES(4, '687 Haight Street', '94117', 'San Francisco', 'California', 1);  

INSERT INTO ADDRESS (ADDRESS_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID)
VALUES(5, '128 Cheyanne Street', '20169', 'Haymarket', 'Virginia', 1); 

INSERT INTO ADDRESS (ADDRESS_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID)
VALUES(6, '3420 Ember Lane', '59102', 'Billings', 'Montana', 1);  
  
  
--Insert into Products table (5)
INSERT INTO Products (PRODUCT_ID, PRODUCT_NAME, PRODUCT_NUMBER, LIST_PRICE)
VALUES(1001, 'Phalenopsis Yellow', 'PhalYellow01', 17.95);	

INSERT INTO Products (PRODUCT_ID, PRODUCT_NAME, PRODUCT_NUMBER, LIST_PRICE)
VALUES(1002, 'Phalenopsis White', 'PhalWhite02', 17.95);

INSERT INTO Products (PRODUCT_ID, PRODUCT_NAME, PRODUCT_NUMBER, LIST_PRICE)
VALUES(1003, 'Dendrobium violet', 'DendViolet03', 19.95);

INSERT INTO Products (PRODUCT_ID, PRODUCT_NAME, PRODUCT_NUMBER, LIST_PRICE)
VALUES(1004, 'Cymbidium pink', 'CymbPink04', 24.95);

INSERT INTO Products (PRODUCT_ID, PRODUCT_NAME, PRODUCT_NUMBER, LIST_PRICE)
VALUES(1005, 'Cymbidium yellow', 'CymbYellow05', 24.95);

	
--Insert into Customers table (3)
INSERT INTO Customers (CUSTOMER_ID, LAST_NAME, FIRST_NAME, EMAIL, PHONE, ADDRESS_ID)
VALUES(300301, 'Smithe', 'Jane', 'jsmithe@gmail.com', '4108842751', 1);

INSERT INTO Customers (CUSTOMER_ID, LAST_NAME, FIRST_NAME, EMAIL, PHONE, ADDRESS_ID)
VALUES(300302, 'Jackson', 'Anna', 'ajackson@outlook.com', '442074938000', 2);	

INSERT INTO Customers (CUSTOMER_ID, LAST_NAME, FIRST_NAME, EMAIL, PHONE, ADDRESS_ID)
VALUES(300303, 'Cooper', 'Michael', 'mcooper@outlook.com', '6626206677', 3);

INSERT INTO Customers (CUSTOMER_ID, LAST_NAME, FIRST_NAME, EMAIL, PHONE, ADDRESS_ID)
VALUES(300304, 'Johnson', 'Ryan', 'jjohnson@outlook.com', '4157711453', 4);

INSERT INTO Customers (CUSTOMER_ID, LAST_NAME, FIRST_NAME, EMAIL, PHONE, ADDRESS_ID)
VALUES(300305, 'Smith', 'Logan', 'lsmith@gmail.com', '7036687415', 5);

INSERT INTO Customers (CUSTOMER_ID, LAST_NAME, FIRST_NAME, EMAIL, PHONE, ADDRESS_ID)
VALUES(300306, 'Lewis', 'Mark', 'mlewis@outlook.com', '4062522256', 6);


--Insert into TAXRATES table (3)
INSERT INTO TAXRATES (SALES_TAX_ID, REGION_ID, TAX_RATE, TAX_NAME)
VALUES(10090001, 21048, 6.00, 'Maryland Sales tax');

INSERT INTO TAXRATES (SALES_TAX_ID, REGION_ID, TAX_RATE, TAX_NAME)
VALUES(10090002, 7005001, 20.00, 'United Kingdom Sales tax');

INSERT INTO TAXRATES (SALES_TAX_ID, REGION_ID, TAX_RATE, TAX_NAME)
VALUES(10090003, 9910100, 7.00, 'Thailand Sales tax');

INSERT INTO TAXRATES (SALES_TAX_ID, REGION_ID, TAX_RATE, TAX_NAME)
VALUES(10090004, 94117, 8.50, 'San Francisco Sales tax');

INSERT INTO TAXRATES (SALES_TAX_ID, REGION_ID, TAX_RATE, TAX_NAME)
VALUES(10090005, 20169, 6.00, 'Virginia Sales tax');

INSERT INTO TAXRATES (SALES_TAX_ID, REGION_ID, TAX_RATE, TAX_NAME)
VALUES(10090006, 59102, 0.00, 'Montana Sales tax');


--Insert into SalesOrders table (4)
INSERT INTO SALESORDERS (SALES_ORDER_ID, SALES_ORDER_NUMBER, CUSTOMER_ID, SALES_ORDER_DATE, DUE_DATE, SHIP_DATE, CREDIT_CARD_APPROAL_CODE, SUBTOTAL, TAX_AMOUNT, TOTAL_DUE)
VALUES(181023001, 910002, 300301, TO_DATE('12/10/2018', 'DD/MM/YYYY'), TO_DATE('30/10/2018', 'DD/MM/YYYY'),TO_DATE('26/10/2018', 'DD/MM/YYYY'), 'QA4512zxcv121', 17.95, 1.08, 19.03);

INSERT INTO SALESORDERS (SALES_ORDER_ID, SALES_ORDER_NUMBER, CUSTOMER_ID, SALES_ORDER_DATE, DUE_DATE, SHIP_DATE, CREDIT_CARD_APPROAL_CODE, SUBTOTAL, TAX_AMOUNT, TOTAL_DUE)
VALUES(181023002, 910003, 300302, TO_DATE('23/10/2018', 'DD/MM/YYYY'), TO_DATE('02/11/2018', 'DD/MM/YYYY'),TO_DATE('30/10/2018', 'DD/MM/YYYY'), 'JU25471145129', 44.90, 8.98, 53.88);

INSERT INTO SALESORDERS (SALES_ORDER_ID, SALES_ORDER_NUMBER, CUSTOMER_ID, SALES_ORDER_DATE, DUE_DATE, SHIP_DATE, CREDIT_CARD_APPROAL_CODE, SUBTOTAL, TAX_AMOUNT, TOTAL_DUE)
VALUES(181024003, 910004,300302, TO_DATE('24/10/2018', 'DD/MM/YYYY'), TO_DATE('02/11/2018', 'DD/MM/YYYY'),TO_DATE('30/10/2018', 'DD/MM/YYYY'), 'AW26475489156', 19.95, 3.99, 23.94);

INSERT INTO SALESORDERS (SALES_ORDER_ID, SALES_ORDER_NUMBER, CUSTOMER_ID, SALES_ORDER_DATE, DUE_DATE, SHIP_DATE, CREDIT_CARD_APPROAL_CODE, SUBTOTAL, TAX_AMOUNT, TOTAL_DUE)
VALUES(181025004, 910005, 300302, TO_DATE('25/10/2018', 'DD/MM/YYYY'), TO_DATE('08/11/2018', 'DD/MM/YYYY'),TO_DATE('01/11/2018', 'DD/MM/YYYY'), 'DF34FG14891526', 19.95, 3.99, 23.94);

INSERT INTO SALESORDERS (SALES_ORDER_ID, SALES_ORDER_NUMBER, CUSTOMER_ID, SALES_ORDER_DATE, DUE_DATE, SHIP_DATE, CREDIT_CARD_APPROAL_CODE, SUBTOTAL, TAX_AMOUNT, TOTAL_DUE)
VALUES(181025005, 910006, 300306, TO_DATE('30/10/2018', 'DD/MM/YYYY'), TO_DATE('09/11/2018', 'DD/MM/YYYY'),TO_DATE('03/11/2018', 'DD/MM/YYYY'), 'WFF4FG1CC12265', 24.95, 0, 24.95);


--Insert into SalesOrderDetails table (5)
INSERT INTO SalesOrderDetails (SALES_ORDER_ID, SALES_ORDER_DETAIL_ID, PRODUCT_ID, QUANTITY, UNIT_PRICE, SALES_TAX_ID, LINE_TOTAL)
VALUES(181023001, 10230001, 1001, 1, 17.95, 10090001, 17.95);

INSERT INTO SalesOrderDetails (SALES_ORDER_ID, SALES_ORDER_DETAIL_ID, PRODUCT_ID, QUANTITY, UNIT_PRICE, SALES_TAX_ID, LINE_TOTAL)
VALUES(181023002, 102300012, 1003, 1, 19.95, 10090002, 19.95);

INSERT INTO SalesOrderDetails (SALES_ORDER_ID, SALES_ORDER_DETAIL_ID, PRODUCT_ID, QUANTITY, UNIT_PRICE, SALES_TAX_ID, LINE_TOTAL)
VALUES(181023002, 102300013, 1004, 1, 24.95, 10090002, 24.95);

INSERT INTO SalesOrderDetails (SALES_ORDER_ID, SALES_ORDER_DETAIL_ID, PRODUCT_ID, QUANTITY, UNIT_PRICE, SALES_TAX_ID, LINE_TOTAL)
VALUES(181024003, 102400014, 1003, 1, 19.95, 10090002, 19.95);

INSERT INTO SalesOrderDetails (SALES_ORDER_ID, SALES_ORDER_DETAIL_ID, PRODUCT_ID, QUANTITY, UNIT_PRICE, SALES_TAX_ID, LINE_TOTAL)
VALUES(181025004, 102400015, 1003, 1, 19.95, 10090002, 19.95);

INSERT INTO SalesOrderDetails (SALES_ORDER_ID, SALES_ORDER_DETAIL_ID, PRODUCT_ID, QUANTITY, UNIT_PRICE, SALES_TAX_ID, LINE_TOTAL)
VALUES(181025005, 102400016, 1005, 1, 24.95, 10090006, 19.95);

--To view the structure of the tables using the desc(ribe) command
desc Regions;
desc Countries;
desc Address;
desc Customers;
desc TaxRates; 
desc products;
desc salesOrders;
desc salesOrderDetails;

-- data dictionary command to view comment from the productID column from the Products table
SELECT comments
FROM user_col_comments
WHERE TABLE_NAME = 'PRODUCTS' AND COLUMN_NAME = 'PRODUCT_ID';

-- Using data dictionary command to view all column comments from current user
select * from USER_COL_COMMENTS;

--Creates view Sales; returns records from Customers and the matched records from salesOrders.
CREATE OR REPLACE FORCE EDITIONABLE VIEW "SALESVIEW" AS 
  SELECT customers.CUSTOMER_ID
    , customers.LAST_NAME
	, salesorders.SALES_ORDER_ID
	, salesorders.SALES_ORDER_NUMBER   
    , salesorders.SALES_ORDER_DATE
	, salesorders.DUE_DATE
	, salesorders.SHIP_DATE
FROM salesorders
    LEFT OUTER JOIN customers ON salesorders.CUSTOMER_ID = customers.CUSTOMER_ID;
	
--To call the SALES view	
SELECT * FROM SALESVIEW;	

-- Selects all employeeids and order them from ascending
SELECT * from Customers order by LAST_NAME ASC;

-- selects employees with more than one sales orderid
SELECT CUSTOMER_ID
FROM salesOrders
GROUP BY CUSTOMER_ID
HAVING COUNT( DISTINCT SALES_ORDER_ID ) >= 1 order by CUSTOMER_ID asc;	

--selects productid, name and salesOrderNumber
SELECT 
    a.PRODUCT_ID
	, a.PRODUCT_NAME
	, c.SALES_ORDER_NUMBER
FROM products a
inner JOIN salesorderdetails b
    on a.PRODUCT_ID = b.PRODUCT_ID
inner JOIN salesOrders c
    on b.SALES_ORDER_ID = c.SALES_ORDER_ID;

--selects the products with price higher than twenty dollars	
SELECT PRODUCT_NAME, LIST_PRICE
FROM Products
WHERE LIST_PRICE < 20.00;	

--Shows the salesOrderID but without the first four digits(year) and the customerid
SELECT 
    substr(SALES_ORDER_ID,5)
	, CUSTOMER_ID
FROM SalesOrders;

--Select the productid and name that is associated with that customerid	
SELECT 
    a.PRODUCT_ID
	, a.PRODUCT_NAME
	, d.CUSTOMER_ID
FROM products a
inner JOIN salesorderdetails b
    on a.PRODUCT_ID = b.PRODUCT_ID
inner JOIN salesOrders c
    on b.SALES_ORDER_ID = c.SALES_ORDER_ID
inner JOIN customers d
    on c.CUSTOMER_ID = d.CUSTOMER_ID;
	
--Select (left outer) to check which product might not have association with any customerid
SELECT 
    a.PRODUCT_ID
	, a.PRODUCT_NAME
	, d.CUSTOMER_ID
FROM products a
left outer JOIN salesorderdetails b
    on a.PRODUCT_ID = b.PRODUCT_ID
left outer JOIN salesOrders c
    on b.SALES_ORDER_ID = c.SALES_ORDER_ID
left outer JOIN customers d
    on c.CUSTOMER_ID = d.CUSTOMER_ID;
	
--Select the tax rates 	
SELECT 
    a.SALES_TAX_ID
	, a.TAX_RATE
	, a.TAX_NAME
	, c.SALES_ORDER_NUMBER
FROM TAXRATES a
inner JOIN salesorderdetails b
    on a.SALES_TAX_ID = b.SALES_TAX_ID
inner JOIN salesOrders c
    on b.SALES_ORDER_ID = c.SALES_ORDER_ID;

--Select the customer associated with credit card approval code and tax amount	
SELECT 
    a.ADDRESS_ID
	, a.POSTAL_CODE
	, a.CITY
	, a.STATE_PROVINCE
	, a.COUNTRY_ID
	, b.LAST_NAME
	, b.CUSTOMER_ID
	, c.CREDIT_CARD_APPROAL_CODE
	, c.TAX_AMOUNT
	, e.PRODUCT_NAME	
FROM ADDRESS a
inner JOIN CUSTOMERS b
    on a.ADDRESS_ID = b.ADDRESS_ID
inner JOIN SALESORDERS c
    on b.CUSTOMER_ID = c.CUSTOMER_ID
inner JOIN SALESORDERDETAILS d
    on c.SALES_ORDER_ID = d.SALES_ORDER_ID
inner JOIN PRODUCTS e
    on d.PRODUCT_ID = e.PRODUCT_ID;
	
--Select the tax regions and rates	
SELECT    
	 a.SALES_TAX_ID
	, b.TAX_NAME
	, b.TAX_RATE
	, c.REGION_NAME
FROM salesorderdetails a
right outer JOIN taxrates b
    on a.SALES_TAX_ID = b.SALES_TAX_ID
right outer JOIN regions c
    on b.REGION_ID = c.REGION_ID;
	
